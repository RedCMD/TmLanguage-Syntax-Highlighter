{
	"comments": {
		// symbol used for single line comment. Remove this entry if your language does not support line comments
		"lineComment": "\"comment\": \"\",",
		// symbols used for start and end a block comment. Remove this entry if your language does not support block comments
		"blockComment": [ "\"//\": {", "}" ]
	},
	// symbols used as brackets
	"brackets": [
		["{", "}"],
		["[", "]"]
	],
	// symbols that are auto closed when typing
	"autoClosingPairs": [
		["${", "}"],
		["{", "}"],
		["[", "]"],
		["\"", "\""]
	],
	"autoCloseBefore": "[]{}:, \n\t",
	// symbols that can be used to surround a selection
	"surroundingPairs": [
		["{", "}"],
		["[", "]"],
		["\"", "\""],
		["(", ")"] // Fallback for `regex.language-configuration.json` because "surroundingPairs" does not work in embedded languages
	],
	// symbols that can be colourized
	"colorizedBracketPairs": [
		["${", "}"],
		["{", "}"],
		["[", "]"]
	],
	// "wordPattern" doesn't support `atomic` groups or `possessive quantifiers`, leading to catastrophic backtracking. Workaround is to use a lookahead and backreference /(?=(?<name>)...)\\k<name>/
	// "wordPattern" is used in reference for intellisense suggestion triggering, word highlighting and ctrl+hover definitions
	"wordPattern": "(?<=(^|(?<!\\\\)[\\[\\]{}:,\\t])\\s*)(?=(?<json>[\\w/$]+))\\k<json>(?=\\s*($|[\\[\\]{}:,\"\\t](?!\\\\)))|(?<=(?<!\\\\)[\"\\s]|\\b[LR]:)(?=(?<string>[a-zA-Z$/][\\w./$-]*[\\w]))\\k<string>(?=[\"\\s])|(?<=(?<!\\\\)\")(?=(?<include>[\\w.$-]*#?[\\w.#$-]*))(?!\")\\k<include>(?=\")"
}