{
	"version": "https://github.com/RedCMD/TmLanguage-Syntax-Highlighter/blob/main/syntaxes/regex.tmLanguage.json",
	"$schema": "https://raw.githubusercontent.com/RedCMD/TmLanguage-Syntax-Highlighter/main/vscode.tmLanguage.schema.json",
	"scopeName": "source.syntax.regexp.tmLanguage",
	"name": "TextMate Language Regex",
	"injections": {
		"L:capture-group-lookbehind -capture-group-modify-extended -character-class -comment": {
			"patterns": [
				{ "include": "#capture-group-lookbehind-invalid" },
				{ "include": "#absent-invalid" }
			]
		},
		"L:capture-group-lookbehind-extended -capture-group-modify -character-class -comment": {
			"patterns": [
				{ "include": "#capture-group-lookbehind-invalid-extended" },
				{ "include": "#absent-invalid-extended" }
			]
		},
		"L:capture-group-negative-lookbehind -capture-group-modify-extended -character-class -comment": {
			"patterns": [
				{ "include": "#capture-group-negative-lookbehind-invalid" },
				{ "include": "#absent-invalid" }
			]
		},
		"L:capture-group-negative-lookbehind-extended -capture-group-modify -character-class -comment": {
			"patterns": [
				{ "include": "#capture-group-negative-lookbehind-invalid-extended" },
				{ "include": "#absent-invalid-extended" }
			]
		}
	},
	"patterns": [
		{ "include": "#character-types" },
		{ "include": "#character-types-2" },
		{ "include": "#characters" },
		{ "include": "#anchor" },
		{ "include": "#subroutine" },
		{ "include": "#backreference" },
		{ "include": "#code-point" },
		{ "include": "#alternation" },
		{ "include": "#quantifier" },
		{ "include": "#character-class" },
		{ "include": "#absent" },
		{ "include": "#callout" },
		{ "include": "#non-capture-group" },
		{ "include": "#capture-group-modify" },
		{ "include": "#capture-group-modify-extended" },
		{ "include": "#capture-group-conditional" },
		{ "include": "#capture-group-negative-lookbehind" },
		{ "include": "#capture-group-lookbehind" },
		{ "include": "#capture-group-lookahead" },
		{ "include": "#capture-group-comment" },
		{ "include": "#capture-group-name" },
		{ "include": "#capture-group" },
		{ "include": "#escape-character" },
		{ "include": "#invalid" },
		{ "include": "#character-literal" },
		{ "include": "#test" }
	],
	"repository": {
		"$self-extended": {
			"patterns": [
				{ "include": "#comment-extended" },
				{ "include": "#absent-extended" },
				{ "include": "#callout" },
				{ "include": "#escape-character-extended" },
				{ "include": "#non-capture-group-extended" },
				{ "include": "#capture-group-comment" },
				{ "include": "#capture-group-modify-extended" },
				{ "include": "#capture-group-modify" },
				{ "include": "#capture-group-conditional-extended" },
				{ "include": "#capture-group-negative-lookbehind-extended" },
				{ "include": "#capture-group-lookbehind-extended" },
				{ "include": "#capture-group-lookahead-extended" },
				{ "include": "#capture-group-name-extended" },
				{ "include": "#capture-group-extended" },
				{ "include": "$self" }
			]
		},
		"comment-extended": {
			"patterns": [
				{
					"match": " +",
					"name": "comment.tm"
				},
				{
					"comment": "#...\n",
					"begin": "#",
					"end": "\\\\n|(?=\")|$",
					"beginCaptures": { "0": { "name": "support.function.tm" } },
					"endCaptures": { "0": { "name": "constant.character.escape.tm" } },
					"name": "comment.tm",
					"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
				}
			]
		},
		"escape-character": {
			"comment": "\\[ \\{ \\} \\( \\) \\$ \\? \\| \\^ \\* \\+ \\. \\\\ \" \b \f \n \r \t",
			"patterns": [
				{
					"match": "(\\\\{3})(\\\\)",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "entity.name.label.tm strong" }
					}
				},
				{
					"match": "(\\\\{2})?({(\\d+)?)(?>((?(<1>)(\\\\{2})|(\\\\{2})))?(,))?((?(<3>)\\d*|\\d+))(?(<4>)(\\\\{2})|\\g<4>)?(})",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "entity.name.label.tm strong regex" },
						"5": { "name": "punctuation.definition.tag.tm" },
						"6": { "name": "constant.character.escape.tm" },
						"7": { "name": "entity.name.label.tm strong" },
						"8": { "name": "entity.name.label.tm strong" },
						"9": { "name": "punctuation.definition.tag.tm" },
						"10": { "name": "entity.name.label.tm strong regex" }
					}
				},
				{
					"match": "(\\\\{2})([\\[()$?|^*+.])",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "entity.name.label.tm strong regex" }
					}
				},
				{
					"match": "\\\\(\\\\|(?=/))",
					"name": "punctuation.definition.tag.tm"
				},
				{
					"match": "\\\\\"",
					"name": "string.tm"
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tm"
				}
			]
		},
		"escape-character-extended": {
			"comment": "\\# \\ ",
			"match": "(\\\\{2})(#| )",
			"captures": {
				"1": { "name": "constant.character.escape.tm" },
				"2": { "name": "entity.name.label.tm strong" }
			}
		},
		"capture-group": {
			"comment": "( ... )",
			"begin": "\\(",
			"end": "\\)",
			"captures": { "0": { "name": "constant.character.set.regexp.tm strong" } },
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-extended": {
			"comment": "( ... )",
			"begin": "\\(",
			"end": "\\)",
			"captures": { "0": { "name": "constant.character.set.regexp.tm strong" } },
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"non-capture-group": {
			"comment": "(?:...) (?>...)",
			"begin": "(\\()(\\?[:>])",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm regex" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"patterns": [ { "include": "$self" } ]
		},
		"non-capture-group-extended": {
			"comment": "(?:...) (?>...)",
			"begin": "(\\()(\\?[:>])",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm regex" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-lookahead": {
			"comment": "(?=...) (?!...)",
			"begin": "(\\()(\\?[!=])",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "invalid.illegal.tm markup.underline" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-lookahead-extended": {
			"comment": "(?=...) (?!...)",
			"begin": "(\\()(\\?[!=])",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "invalid.illegal.tm markup.underline" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-lookbehind": {
			"comment": "(?<=...)",
			"begin": "(\\()(\\?<=)",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm regex" }
			},
			"endCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "invalid.illegal.tm markup.underline" }
			},
			"contentName": "capture-group-lookbehind",
			"patterns": [
				{ "include": "#capture-group-lookbehind-invalid" },
				{ "include": "#absent-invalid" },
				{ "include": "$self" }
			]
		},
		"capture-group-lookbehind-extended": {
			"comment": "(?<=...)",
			"begin": "(\\()(\\?<=)",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm regex" }
			},
			"endCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "invalid.illegal.tm markup.underline" }
			},
			"contentName": "capture-group-lookbehind-extended",
			"patterns": [
				{ "include": "#capture-group-lookbehind-invalid-extended" },
				{ "include": "#absent-invalid-extended" },
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-lookbehind-invalid": {
			"comment": "(?=...)? (?!...)+ (?<!...)*",
			"begin": "\\(\\?(<?!|=)",
			"end": "\\)(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"captures": {
				"0": { "name": "invalid.illegal.tm markup.underline" },
				"1": { "name": "regex" }
			},
			"patterns": [
				{ "include": "#capture-group-lookbehind-invalid" },
				{ "include": "#absent-invalid" },
				{ "include": "$self" }
			]
		},
		"capture-group-lookbehind-invalid-extended": {
			"comment": "(?=...)? (?!...)+ (?<!...)*",
			"begin": "\\(\\?(<?!|=)",
			"end": "\\)(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"captures": {
				"0": { "name": "invalid.illegal.tm markup.underline" },
				"1": { "name": "regex" }
			},
			"patterns": [
				{ "include": "#capture-group-lookbehind-invalid-extended" },
				{ "include": "#absent-invalid-extended" },
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-negative-lookbehind": {
			"comment": "(?<!...)",
			"begin": "(\\()(\\?<!)",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm regex" }
			},
			"endCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "invalid.illegal.tm markup.underline" }
			},
			"contentName": "capture-group-negative-lookbehind",
			"patterns": [
				{ "include": "#capture-group-negative-lookbehind-invalid" },
				{ "include": "#absent-invalid" },
				{ "include": "$self" }
			]
		},
		"capture-group-negative-lookbehind-extended": {
			"comment": "(?<!...)",
			"begin": "(\\()(\\?<!)",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm regex" }
			},
			"endCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "invalid.illegal.tm markup.underline" }
			},
			"contentName": "capture-group-negative-lookbehind-extended",
			"patterns": [
				{ "include": "#capture-group-negative-lookbehind-invalid-extended" },
				{ "include": "#absent-invalid-extended" },
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-negative-lookbehind-invalid": {
			"patterns": [
				{
					"comment": "(?=...)? (?!...){2,3}",
					"begin": "\\(\\?[!=]",
					"end": "\\)(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
					"captures": { "0": { "name": "invalid.illegal.tm markup.underline" } },
					"patterns": [ { "include": "$self" } ]
				},
				{
					"comment": "(...)",
					"begin": "\\((?!\\?[-~<=:!{|IimxWDSPy]|\\*[A-Za-z_])",
					"end": "\\)",
					"captures": { "0": { "name": "invalid.illegal.tm markup.underline" } },
					"patterns": [
						{ "include": "#capture-group-negative-lookbehind-invalid-extended" },
						{ "include": "#absent-invalid-extended" },
						{ "include": "#$self-extended" }
					]
				}
			]
		},
		"capture-group-negative-lookbehind-invalid-extended": {
			"patterns": [
				{
					"comment": "(?=...)? (?!...){2,3}",
					"begin": "\\(\\?[!=]",
					"end": "\\)(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
					"captures": { "0": { "name": "invalid.illegal.tm markup.underline" } },
					"patterns": [
						{ "include": "#capture-group-negative-lookbehind-invalid-extended" },
						{ "include": "#absent-invalid-extended" },
						{ "include": "#$self-extended" }
					]
				},
				{
					"comment": "(...)",
					"begin": "\\((?!\\?[-~<=:!{|IimxWDSPy]|\\*[A-Za-z_])",
					"end": "\\)",
					"captures": { "0": { "name": "invalid.illegal.tm markup.underline" } },
					"patterns": [
						{ "include": "#capture-group-negative-lookbehind-invalid-extended" },
						{ "include": "#absent-invalid-extended" },
						{ "include": "#$self-extended" }
					]
				}
			]
		},
		"capture-group-modify": {
			"patterns": [
				{
					"match": "\\(\\?-+:?\\)",
					"name": "punctuation.definition.tag.tm"
				},
				{
					"comment": "(?y{g}I-imxWDSP)... (?y{w}IimxWDSP-x:...)",
					"begin": "(?<=\")\\G(?>(\\((?=[^:)]++:))|(\\())(\\?)(?=[IimxWDSPy])(?=[^-I:)]*+I)(?=[^x:)]++[:)]|[^-:)]*+-[^x:)]*+x)",
					"end": "(?=\")",
					"beginCaptures": {
						"1": { "name": "constant.character.set.regexp.tm" },
						"2": { "name": "constant.character.set.regexp.tm markup.italic" },
						"3": { "name": "support.function.tm" }
					},
					"name": "capture-group-modify-whole",
					"patterns": [
						{
							"begin": "\\G",
							"end": "(?=[):])",
							"patterns": [
								{
									"match": "I(?=[^-I:)]*I)",
									"name": "punctuation.definition.tag.tm"
								},
								{
									"match": "I",
									"name": "support.function.tm"
								},
								{ "include": "#capture-group-modify-options" }
							]
						},
						{
							"begin": ":",
							"end": "(?=\")",
							"beginCaptures": { "0": { "name": "support.function.tm" } },
							"patterns": [
								{
									"begin": "\\G(?!\\))",
									"end": "(?=\\))",
									"beginCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
									"patterns": [ { "include": "$self" } ]
								},
								{
									"begin": "\\)",
									"end": "(?=\")",
									"beginCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
									"contentName": "invalid.illegal.tm markup.underline.tm",
									"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
								}
							]
						},
						{
							"begin": "\\)",
							"end": "(?=\")",
							"beginCaptures": { "0": { "name": "constant.character.set.regexp.tm markup.italic" } },
							"patterns": [ { "include": "$self" } ]
						}
					]
				},
				{
					"comment": "(?y{g}-imxWDSP) (?y{w}imxWDSP-x: ...)",
					"begin": "(?>(\\((?=[^:)]+:))|(\\())(\\?)(?=[-IimxWDSPy])(?=[^x:)]++[:)]|[^-:)]*+-[^x:)]*+x[^:)]*+[:)])",
					"end": "(?((?!\\1))\\)|(?=[\")]))(?#Condition is true only when Backreference \\1 from capture group 1 in \"begin\" is *not* empty.)",
					"beginCaptures": {
						"1": { "name": "constant.character.set.regexp.tm" },
						"2": { "name": "constant.character.set.regexp.tm markup.italic" },
						"3": { "name": "support.function.tm" }
					},
					"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
					"name": "capture-group-modify",
					"patterns": [
						{
							"begin": "\\G",
							"end": "(:)|(\\))",
							"endCaptures": {
								"1": { "name": "support.function.tm" },
								"2": { "name": "constant.character.set.regexp.tm markup.italic" }
							},
							"patterns": [ { "include": "#capture-group-modify-options" } ]
						},
						{ "include": "$self" }
					]
				}
			]
		},
		"capture-group-modify-extended": {
			"patterns": [
				{
					"match": "\\(\\?-+:?\\)",
					"name": "punctuation.definition.tag.tm"
				},
				{
					"comment": "(?y{g}IimxWDSP-)... (?y{w}Ix-imWDSP:...)",
					"begin": "(?<=\")\\G(?>(\\((?=[^:)]++:))|(\\())(\\?)(?=[IimxWDSPy])(?=[^-I:)]*+I)(?=[^-:)]*+[^x:)]*+[:)])",
					"end": "(?=\")",
					"beginCaptures": {
						"1": { "name": "constant.character.set.regexp.tm" },
						"2": { "name": "constant.character.set.regexp.tm markup.italic" },
						"3": { "name": "support.function.tm" }
					},
					"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
					"name": "capture-group-modify-whole-extended",
					"patterns": [
						{
							"begin": "\\G",
							"end": "(:)|(\\))",
							"endCaptures": {
								"1": { "name": "support.function.tm" },
								"2": { "name": "constant.character.set.regexp.tm markup.italic" }
							},
							"patterns": [
								{
									"match": "I(?=[^-I:)]*I)",
									"name": "punctuation.definition.tag.tm"
								},
								{
									"match": "I",
									"name": "support.function.tm"
								},
								{ "include": "#capture-group-modify-options" }
							]
						},
						{
							"begin": "(?<=:)",
							"end": "(?=\")",
							"patterns": [
								{
									"begin": "\\G",
									"end": "\\)",
									"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
									"patterns": [ { "include": "#$self-extended" } ]
								},
								{
									"begin": "(?<=\\))",
									"end": "(?=\")",
									"name": "invalid.illegal.tm",
									"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
								}
							]
						},
						{ "include": "#$self-extended" }
					]
				},
				{
					"comment": "(?y{g}imxWDSP-) (?y{w}x-imWDSP:...)",
					"begin": "(?>(\\((?=[^:)]+:))|(\\())(\\?)(?=[-IimxWDSPy])(?=[^-:)]*+[^x:)]*+[:)])",
					"end": "(?((?!\\1))\\)|(?=[\")]))(?#Condition is true only when Backreference \\1 from capture group 1 in \"begin\" is *not* empty.)",
					"beginCaptures": {
						"1": { "name": "constant.character.set.regexp.tm" },
						"2": { "name": "constant.character.set.regexp.tm markup.italic" },
						"3": { "name": "support.function.tm" }
					},
					"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
					"name": "capture-group-modify-extended",
					"patterns": [
						{
							"begin": "\\G",
							"end": "(:)|(\\))",
							"endCaptures": {
								"1": { "name": "support.function.tm" },
								"2": { "name": "constant.character.set.regexp.tm markup.italic" }
							},
							"patterns": [ { "include": "#capture-group-modify-options" } ]
						},
						{ "include": "#$self-extended" }
					]
				}
			]
		},
		"capture-group-modify-options": {
			"comment": "- i m x W D S P y{g} y{w}",
			"patterns": [
				{
					"match": "([imxWDSP]|y{[gw]})(?=[^:)]*?\\1)",
					"name": "punctuation.definition.tag.tm"
				},
				{
					"begin": "-",
					"end": "(?=[:)])",
					"beginCaptures": { "0": { "name": "support.function.tm" } },
					"patterns": [
						{
							"match": "-+",
							"name": "punctuation.definition.tag.tm"
						},
						{
							"match": "y{[gw]}",
							"name": "invalid.illegal.tm markup.underline"
						},
						{ "include": "#capture-group-modify-options" }
					]
				},
				{
					"match": "[imxWDSP]|y{[gw]}",
					"name": "support.function.tm"
				},
				{
					"match": ".[^-IimxWDSPy{gw}:)]*",
					"name": "invalid.illegal.tm markup.underline"
				}
			]
		},
		"capture-group-conditional": {
			"comment": "(?(1)...|...) (?(-001)...) (?(1+0)...|...) (?(<1>)...) (?('+1')...|...) (?(<1-0>)...) (?(<name>)...) (?('name-0')...|...) (?(<name+00>)...) (?(...)...|...)",
			"begin": "(\\()(\\?)(?>(\\()([<'][^)]*|[-+]?0*[12]?\\d{1,9}(?>[+-]0*[12]?\\d{1,9})?)(\\))|(\\((?>\\?{|\\*)[^)]*\\))|(\\())",
			"end": "(?<!\\(\\G)\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm" },
				"3": { "name": "constant.character.set.regexp.tm markup.italic" },
				"4": { "patterns": [ { "include": "#capture-group-referencing" } ] },
				"5": { "name": "constant.character.set.regexp.tm markup.italic" },
				"6": { "patterns": [ { "include": "#callout" } ] },
				"7": { "name": "constant.character.set.regexp.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"name": "capture-group-conditional",
			"patterns": [
				{
					"begin": "(?<=\\()\\G",
					"end": "\\)",
					"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
					"patterns": [ { "include": "$self" } ]
				},
				{
					"begin": "\\|",
					"end": "(?=\\))",
					"beginCaptures": { "0": { "name": "support.function.tm" } },
					"patterns": [ { "include": "$self" } ]
				},
				{ "include": "$self" }
			]
		},
		"capture-group-conditional-extended": {
			"comment": "(?(1)...|...) (?(-001)...) (?(1+0)...|...) (?(<1>)...) (?('+1')...|...) (?(<1-0>)...) (?(<name>)...) (?('name-0')...|...) (?(<name+00>)...) (?(...)...|...)",
			"begin": "(\\()(\\?)(?>(\\()([<'][^)]*|[-+]?0*[12]?\\d{1,9}(?>[+-]0*[12]?\\d{1,9})?)(\\))|(\\(\\?{[^)]*\\))|(\\())",
			"end": "(?<!\\(\\G)\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm" },
				"3": { "name": "constant.character.set.regexp.tm markup.italic" },
				"4": { "patterns": [ { "include": "#capture-group-referencing" } ] },
				"5": { "name": "constant.character.set.regexp.tm markup.italic" },
				"6": { "patterns": [ { "include": "#callout" } ] },
				"7": { "name": "constant.character.set.regexp.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"name": "capture-group-conditional-extended",
			"patterns": [
				{
					"begin": "(?<=\\()\\G",
					"end": "\\)",
					"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
					"patterns": [ { "include": "#$self-extended" } ]
				},
				{
					"begin": "\\|",
					"end": "(?=\\))",
					"beginCaptures": { "0": { "name": "support.function.tm" } },
					"patterns": [ { "include": "#$self-extended" } ]
				},
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-referencing": {
			"comment": "1 <2> '3' 1+0 <+2-0> '-3+0' 'name' <name+0> 'name-0'    Capture group soft limit is 999 and hard limit 32767    Level limit is 2147483647",
			"match": "(<|(?<quote>'))(?>(?>(?<num>[-+]?(0*)(?>[1-9]\\d{,2}(\\d{,2})|(0)))|(\\w+))((?~(?(<quote>)'|>)|[+-]))(?<level>[+-](0*)[12]?\\d{1,9})?)?((?~(?(<quote>)'|>)))((?(<quote>)'|>))?([^)]*)|\\g<num>\\g<level>?(.*)",
			"captures": {
				"1": { "name": "support.function.tm" },
				"3": { "name": "constant.numeric.tm" },
				"4": { "name": "punctuation.definition.tag.tm" },
				"5": { "name": "invalid.illegal.tm markup.italic" },
				"6": { "name": "invalid.illegal.tm markup.underline" },
				"7": { "name": "markup.bold" },
				"8": { "name": "invalid.illegal.tm markup.underline regex" },
				"9": { "name": "constant.numeric.tm" },
				"10": { "name": "punctuation.definition.tag.tm" },
				"11": { "name": "invalid.illegal.tm markup.underline regex" },
				"12": { "name": "support.function.tm" },
				"13": { "name": "invalid.illegal.tm markup.underline regex" },
				"14": { "name": "invalid.illegal.tm markup.underline regex" }
			}
		},
		"capture-group-name": {
			"comment": "(?<name>...) (?'name'...)",
			"begin": "(\\()(\\?)(<|(?<quote>'))(?=((?(<quote>)'|>))?)",
			"end": "\\)",
			"name": "capture-group-name",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm strong" },
				"2": { "name": "support.function.tm" },
				"3": { "name": "support.function.tm" },
				"5": { "name": "invalid.illegal.tm markup.strikethrough" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm strong" } },
			"patterns": [
				{ "include": "#capture-group-name-name" },
				{ "include": "$self" }
			]
		},
		"capture-group-name-extended": {
			"comment": "(?<name>...) (?'name'...)",
			"begin": "(\\()(\\?)(<|(?<quote>'))(?=((?(<quote>)'|>))?)",
			"end": "\\)",
			"name": "capture-group-name",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm strong" },
				"2": { "name": "support.function.tm" },
				"3": { "name": "support.function.tm" },
				"5": { "name": "invalid.illegal.tm markup.strikethrough" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm strong" } },
			"patterns": [
				{ "include": "#capture-group-name-name" },
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-name-name": {
			"comment": "_name;0%>",
			"begin": "(?<=(?'bracket'<)|')\\G((?~[A-Za-z_)\"]|(?('bracket')>|')))",
			"end": "(\\\\(?>u\\d{,3})?)?((?((?!\\1))>|'))|(?=(\"|\\)))",
			"beginCaptures": { "2": { "name": "invalid.illegal.tm markup.underline regex" } },
			"endCaptures": {
				"1": { "name": "invalid.illegal.tm markup.underline" },
				"2": { "name": "support.function.tm" },
				"3": { "name": "invalid.illegal.tm markup.strikethrough" }
			},
			"contentName": "markup.bold regex",
			"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
		},
		"capture-group-comment": {
			"comment": "(?#...)",
			"begin": "(\\()(\\?#)(?#comment)",
			"end": "(?<=[^\\\\]\\\\{4}*)\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm markup.italic" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm markup.italic" } },
			"contentName": "comment.tm",
			"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
		},
		"absent": {
			"comment": "(?~|...|...) (?~|...) (?~...)",
			"begin": "(\\()(\\?~\\|?)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"patterns": [
				{
					"begin": "(?<=\\|)\\G",
					"end": "\\||(?=\\))",
					"endCaptures": { "0": { "name": "support.function.tm" } },
					"patterns": [ { "include": "$self" } ]
				},
				{ "include": "$self" }
			]
		},
		"absent-extended": {
			"comment": "(?~|...|...) (?~...)",
			"begin": "(\\()(\\?~\\|?)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"patterns": [
				{
					"begin": "(?<=\\|)\\G",
					"end": "\\|",
					"endCaptures": { "0": { "name": "support.function.tm" } },
					"patterns": [ { "include": "#$self-extended" } ]
				},
				{ "include": "#$self-extended" }
			]
		},
		"absent-invalid": {
			"comment": "(?~|...|...) (?~|...) (?~|)",
			"begin": "(\\()(\\?~\\|)",
			"end": "(?!\\G)\\)|(?<=\\))",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"patterns": [
				{
					"begin": "\\G",
					"end": "(\\|)|(\\))",
					"endCaptures": {
						"1": { "name": "support.function.tm" },
						"2": { "name": "invalid.illegal.tm markup.underline" }
					},
					"patterns": [ { "include": "$self" } ]
				},
				{ "include": "$self" }
			]
		},
		"absent-invalid-extended": {
			"comment": "(?~|...|...) (?~|...) (?~|)",
			"begin": "(\\()(\\?~\\|)",
			"end": "(?!\\G)\\)|(?<=\\))",
			"beginCaptures": {
				"1": { "name": "constant.character.set.regexp.tm" },
				"2": { "name": "support.function.tm" }
			},
			"endCaptures": { "0": { "name": "constant.character.set.regexp.tm" } },
			"patterns": [
				{
					"begin": "\\G",
					"end": "(\\|)|(\\))",
					"endCaptures": {
						"1": { "name": "support.function.tm" },
						"2": { "name": "invalid.illegal.tm markup.underline" }
					},
					"patterns": [ { "include": "#$self-extended" } ]
				},
				{ "include": "#$self-extended" }
			]
		},
		"callout": {
			"patterns": [
				{
					"comment": "(?{{{...contents...}}}[tag]D)",
					"match": "(\\()(\\?)({(?:\\g<-1>|({)?(.*?[^}])?(})?)})([^\\[)]*)(?>(\\[)([^]]*)(]))?([^X<>)]*)([X<>])?([^)]*)(\\))",
					"captures": {
						"1": { "name": "constant.character.set.regexp.tm markup.italic" },
						"2": { "name": "support.function.tm" },
						"3": { "name": "support.function.tm" },
						"4": { "name": "invalid.illegal.tm markup.underline regex" },
						"5": {
							"name": "regex",
							"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
						},
						"6": { "name": "invalid.illegal.tm markup.underline regex" },
						"7": { "name": "invalid.illegal.tm markup.underline regex" },
						"8": { "name": "support.function.tm" },
						"9": {
							"patterns": [
								{
									"match": "\\W+|\\d+",
									"name": "invalid.illegal.tm markup.underline regex"
								},
								{
									"match": "\\w+",
									"name": "markup.bold"
								}
							]
						},
						"10": { "name": "support.function.tm" },
						"11": { "name": "invalid.illegal.tm markup.underline regex" },
						"12": { "name": "markup.bold" },
						"13": { "name": "invalid.illegal.tm markup.underline regex" },
						"14": { "name": "constant.character.set.regexp.tm markup.italic" }
					}
				},
				{
					"comment": "(*name[tag]{args...})",
					"match": "(\\()(\\*)([A-Za-z_]\\w*)([^\\[{)]*)(?>(\\[)([^]]*)(]))?([^{)]*)(?>({)([^}]*)(}))?([^)]*)(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
					"captures": {
						"1": { "name": "constant.character.set.regexp.tm markup.italic" },
						"2": { "name": "support.function.tm" },
						"3": { "name": "markup.bold" },
						"4": { "name": "invalid.illegal.tm markup.underline regex" },
						"5": { "name": "support.function.tm" },
						"6": {
							"patterns": [
								{
									"match": "\\W+|\\d+",
									"name": "invalid.illegal.tm markup.underline regex"
								},
								{
									"match": "\\w+",
									"name": "markup.bold"
								}
							]
						},
						"7": { "name": "support.function.tm" },
						"8": { "name": "invalid.illegal.tm markup.underline regex" },
						"9": { "name": "support.function.tm" },
						"10": {
							"name": "regex",
							"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
						},
						"11": { "name": "support.function.tm" },
						"12": { "name": "invalid.illegal.tm markup.underline regex" },
						"13": { "name": "constant.character.set.regexp.tm markup.italic" },
						"14": { "name": "invalid.illegal.tm markup.underline regex" }
					}
				}
			]
		},
		"character-class": {
			"comment": "[...] [^...]",
			"begin": "(\\[)(\\^)?",
			"end": "(?!\\G)]",
			"beginCaptures": {
				"1": { "name": "support.class.tm" },
				"2": { "name": "support.function.tm strong" }
			},
			"endCaptures": { "0": { "name": "support.class.tm" } },
			"contentName": "character-class",
			"patterns": [
				{ "include": "#character-class-range" },
				{ "include": "#character-class-code-point" },
				{ "include": "#character-class-escape" },
				{ "include": "#character-class-posix" },
				{ "include": "#character-class" },
				{ "include": "#character-class-literal" }
			]
		},
		"character-class-escape": {
			"patterns": [
				{
					"match": "\\G(\\\\{2})([]-])",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tm" },
						"2": { "name": "literal.tm regex" }
					}
				},
				{
					"match": "\\G(\\\\{2})(\\^|:)",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "literal.tm" }
					}
				},
				{
					"match": "(\\\\{3})(\\\\)",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "literal.tm" }
					}
				},
				{
					"match": "(\\\\{2})(-)(?=])",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tm" },
						"2": { "name": "literal.tm" }
					}
				},
				{
					"match": "(\\\\{2})([]\\[-]|:(?=]))",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "literal.tm regex" }
					}
				},
				{
					"match": "(\\\\{2})(&)(?=&)",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "literal.tm" }
					}
				},
				{
					"match": "(&)(\\\\{2})(&)",
					"captures": {
						"1": { "name": "literal.tm" },
						"2": { "name": "constant.character.escape.tm" },
						"3": { "name": "literal.tm" }
					}
				},
				{
					"match": "\\\\{2}b",
					"name": "punctuation.definition.list.begin.markdown"
				},
				{ "include": "#character-types" },
				{ "include": "#characters" },
				{
					"match": "\\\\{2}",
					"name": "punctuation.definition.tag.tm"
				},
				{
					"match": "(\\\\)(/)",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tm" },
						"2": { "name": "literal.tm" }
					}
				},
				{
					"match": "\\\\\"",
					"name": "string.tm"
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tm"
				},
				{
					"match": "\\\\.?|[\"\\x-\\x1F\\x7F]",
					"name": "invalid.illegal.tm markup.underline regex"
				}
			]
		},
		"character-class-range": {
			"patterns": [
				{
					"match": "([\\\\-\\x{FFFFFFFF}]-(?!&&)[\\x-Z]|[+-\\x{FFFFFFFF}]-(?!&&)[\\x-*])(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "invalid.illegal.tm markup.underline regex" },
						"2": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"match": "(\\*(-)\\+)(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "support.class.tm" },
						"2": { "name": "punctuation.definition.tag.tm strong" },
						"3": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"comment": "TODO: \\d seems to match unicode numbers as well?",
					"match": "(\\d(-)\\d)(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "constant.numeric.tm" },
						"2": { "name": "strong" },
						"3": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"match": "([A-Z](-)[A-Z])(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "variable.other.enummember.tm" },
						"2": { "name": "strong" },
						"3": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"match": "([a-z](-)[a-z])(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "variable.other.enummember.tm" },
						"2": { "name": "strong" },
						"3": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"match": "(&&)(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "keyword.control.tm" },
						"2": { "name": "strong" },
						"3": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"comment": "For some reason (\\G|...) and any of its variations are extremely performance heavy",
					"match": "\\G(?>(\\\\{2})?[]-]|(?<!\\^)(\\\\{2})\\^|)(-)(?!&&)(?>(\\\\{2})-|(\\\\{3})\\\\|((?<CM2>\\\\{2}(?>c|[CM]-)(?:\\g<CM2>|\\\\u.{,4}|\\\\{,3}.))|\\\\{2}(?>x{\\h[^}]*}|o{[0-7][^}]*}|x\\h{,2}|[0-7]{1,3})|\\\\{1,2}u.{,4})|(\\\\{2})[]\\[-]|(\\\\{2}(?i:[DHSW]|p{[^}]*})|\\[:[^]]+:])|(\\\\{1,2}[^\\\\u])|[^]\\[\\\\])(\\\\{2}(?=-))?",
					"captures": {
						"0": { "name": "support.class.tm regex" },
						"1": { "name": "punctuation.definition.tag.tm" },
						"2": { "name": "constant.character.escape.tm" },
						"3": { "name": "strong" },
						"4": { "name": "punctuation.definition.tag.tm" },
						"5": { "name": "constant.character.escape.tm" },
						"6": { "patterns": [ { "include": "#character-class-range-code-point" } ] },
						"8": { "name": "constant.character.escape.tm" },
						"9": { "name": "invalid.illegal.tm markup.underline regex" },
						"10": {
							"name": "support.class.tm regex",
							"patterns": [ { "include": "#character-class-escape" } ]
						},
						"11": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"match": "(?>(\\\\{3})\\\\|((?<CM>\\\\{2}(?>c|[CM]-)(?:\\g<CM>|\\\\u.{,4}|\\\\{,3}.))|\\\\{2}(?>x{\\h[^}]*}|o{[0-7][^}]*}|x\\h{,2}|[0-7]{1,3})|\\\\{1,2}u.{1,4})|(\\\\{2})[]\\[-]|(\\\\{2}(?i:[DHSW]|p{[^}]*})|\\[:[^]]+:])|(\\\\{1,2}[^\\\\u])|[^]\\[\\\\])(-)(?!&&)(?>(\\\\{2})-|(\\\\{3})\\\\|((?<CM2>\\\\{2}(?>c|[CM]-)(?:\\g<CM2>|\\\\u.{,4}|\\\\{,3}.))|\\\\{2}(?>x{\\h[^}]*}|o{[0-7][^}]*}|x\\h{,2}|[0-7]{1,3})|\\\\{1,2}u.{,4})|(\\\\{2})[]\\[-]|(\\\\{2}(?i:[DHSW]|p{[^}]*})|\\[:[^]]+:])|(\\\\{1,2}[^\\\\u])|[^]\\[\\\\])(\\\\{2}(?=-))?",
					"captures": {
						"0": { "name": "support.class.tm regex" },
						"1": { "name": "constant.character.escape.tm" },
						"2": { "patterns": [ { "include": "#character-class-code-point" } ] },
						"4": { "name": "constant.character.escape.tm" },
						"5": { "name": "invalid.illegal.tm markup.underline regex" },
						"6": {
							"name": "support.class.tm regex",
							"patterns": [ { "include": "#character-class-escape" } ]
						},
						"7": { "name": "strong" },
						"8": { "name": "punctuation.definition.tag.tm" },
						"9": { "name": "constant.character.escape.tm" },
						"10": { "patterns": [ { "include": "#character-class-range-code-point" } ] },
						"12": { "name": "constant.character.escape.tm" },
						"13": { "name": "invalid.illegal.tm markup.underline regex" },
						"14": {
							"name": "support.class.tm regex",
							"patterns": [ { "include": "#character-class-escape" } ]
						},
						"15": { "name": "punctuation.definition.tag.tm" }
					}
				}
			]
		},
		"character-class-posix": {
			"patterns": [
				{
					"comment": "[:...:] [:^...:]",
					"match": "(\\[:\\^?)(?>(\\s*:])|([^]:]{1,20})(?<!(?<!\\\\)\\\\{4}*+\\\\{2})(:]))",
					"captures": {
						"1": { "name": "support.function.tm" },
						"2": { "name": "invalid.illegal.tm markup.italic" },
						"3": { "patterns": [ { "include": "#character-class-posix-value" } ] },
						"4": { "name": "support.function.tm" }
					}
				},
				{
					"comment": "[:...[:...\\]...:...[:...:]",
					"begin": "\\[:(?=(?~(?<!\\\\)(?>\\\\{2}*+\"|\\\\{4}*+]))(?>$|(?<!\\\\)\\\\{4}*:]))",
					"end": ":(?=])|(?<=:)(?=])|(?<=:])",
					"captures": { "0": { "name": "support.function.tm markup.italic regex" } },
					"patterns": [
						{
							"match": "\\G(?>alnum|alpha|ascii|blank|cntrl|x?digit|graph|lower|print|punct|space|upper|word)",
							"name": "invalid.illegal.tm markup.italic"
						},
						{
							"match": ":",
							"name": "support.function.tm markup.italic"
						},
						{
							"match": "(\\\\{2})(])",
							"captures": {
								"1": { "name": "constant.character.escape.tm" },
								"2": { "name": "support.function.tm markup.italic regex" }
							}
						},
						{ "include": "#character-class-range" },
						{ "include": "#code-point" },
						{ "include": "#character-class-escape" },
						{ "include": "#character-class-posix" },
						{ "include": "#character-class-literal" }
					]
				}
			]
		},
		"character-class-posix-value": {
			"patterns": [
				{
					"match": "(.*?)((?i)alnum|alpha|ascii|blank|cntrl|x?digit|graph|lower|print|punct|space|upper|word)",
					"captures": {
						"1": { "name": "invalid.illegal.tm markup.underline regex" },
						"2": {
							"name": "variable.other.enummember.tm",
							"patterns": [
								{
									"match": "[A-Z]",
									"name": "invalid.illegal.tm markup.italic"
								}
							]
						}
					}
				},
				{
					"match": ".+",
					"name": "invalid.illegal.tm markup.underline regex"
				}
			]
		},
		"character-class-literal": {
			"comment": "Match anything left over and all non-meta charaters",
			"match": ".(?>[^]\\x0-\\x1F\"&:\\[\\\\\\x7F-]+(?!-))?",
			"name": "literal.tm regex"
		},
		"character-class-range-code-point": {
			"comment": "\\o{37777777777 0 1777777} \\x{FFFFFFFF 0 1FFFFF}",
			"patterns": [
				{
					"begin": "(\\\\{2}o{)(0{,10}+)(3?[0-7]{1,10})(?<!\\h{12})([0-7]*)",
					"end": "}|(?=\")",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"2": { "name": "punctuation.definition.tag.tm" },
						"3": { "name": "constant.numeric.tm" },
						"4": { "name": "invalid.illegal.tm markup.underline" }
					},
					"endCaptures": { "0": { "name": "punctuation.definition.list.begin.markdown.tm" } },
					"patterns": [
						{
							"match": "(0{,10}+)([0-7]{1,7})(?<!\\h{12})([0-7]*)",
							"captures": {
								"1": { "name": "punctuation.definition.tag.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "invalid.illegal.tm markup.underline" }
							}
						},
						{ "patterns": [ { "include": "#code-point-sequence-seperator" } ] },
						{
							"match": ".[^[0-7] }\\\\\"]*",
							"name": "invalid.illegal.tm markup.underline regex"
						}
					]
				},
				{
					"begin": "(\\\\{2}x{)(0{,7}+)(\\h{1,8})(?<!\\h{9})(\\h*)",
					"end": "}|(?=\")",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"2": { "name": "punctuation.definition.tag.tm" },
						"3": { "name": "constant.numeric.tm" },
						"4": { "name": "invalid.illegal.tm markup.underline" }
					},
					"endCaptures": { "0": { "name": "punctuation.definition.list.begin.markdown.tm" } },
					"patterns": [
						{
							"match": "(0{,7}+)(1?\\h{1,5})(?<!\\h{9})(\\h*)",
							"captures": {
								"1": { "name": "punctuation.definition.tag.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "invalid.illegal.tm markup.underline" }
							}
						},
						{ "patterns": [ { "include": "#code-point-sequence-seperator" } ] },
						{
							"match": ".[^\\h }\\\\\"]*",
							"name": "invalid.illegal.tm markup.underline regex"
						}
					]
				},
				{ "include": "#character-class-code-point" }
			]
		},
		"character-class-code-point": {
			"comment": "\\o{0 7777777} \\x{0 1FFFFF}",
			"patterns": [
				{
					"begin": "\\\\{2}o{(?=[0-7])",
					"end": "}|(?=\")",
					"captures": { "0": { "name": "punctuation.definition.list.begin.markdown.tm" } },
					"patterns": [
						{
							"match": "(0{,10}+)([0-7]{1,7})(?<!\\h{12})([0-7]*)",
							"captures": {
								"1": { "name": "punctuation.definition.tag.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "invalid.illegal.tm markup.underline" }
							}
						},
						{ "patterns": [ { "include": "#code-point-sequence-seperator" } ] },
						{
							"match": ".[^[0-7] }\\\\\"]*",
							"name": "invalid.illegal.tm markup.underline regex"
						}
					]
				},
				{
					"begin": "\\\\{2}x{(?=\\h)",
					"end": "}|(?=\")",
					"captures": { "0": { "name": "punctuation.definition.list.begin.markdown.tm" } },
					"patterns": [
						{
							"match": "(0{,7}+)(1?\\h{1,5})(?<!\\h{9})(\\h*)",
							"captures": {
								"1": { "name": "punctuation.definition.tag.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "invalid.illegal.tm markup.underline" }
							}
						},
						{ "patterns": [ { "include": "#code-point-sequence-seperator" } ] },
						{
							"match": ".[^\\h }\\\\\"]*",
							"name": "invalid.illegal.tm markup.underline regex"
						}
					]
				},
				{ "include": "#code-point" }
			]
		},
		"code-point": {
			"comment": "\\777 \\xFF \\cZ \\o{0 4777777} \\x{0 13FFFF} \\u0000 \\p{L} \\C-\\M-]",
			"patterns": [
				{
					"match": "(\\\\{2})([Ppox])(\\\\{2})({)",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tm" },
						"2": { "name": "entity.name.label.tm strong" },
						"3": { "name": "constant.character.escape.tm" },
						"4": { "name": "entity.name.label.tm strong regex" }
					}
				},
				{
					"begin": "\\\\{2}o{(?=[0-7])",
					"end": "}|(?=\")",
					"captures": { "0": { "name": "punctuation.definition.list.begin.markdown.tm" } },
					"patterns": [
						{
							"match": "(0{,10}+)([1-4]?[0-7]{1,6})(?<!\\h{12})([0-7]*)",
							"captures": {
								"1": { "name": "punctuation.definition.tag.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "invalid.illegal.tm markup.underline" }
							}
						},
						{ "patterns": [ { "include": "#code-point-sequence-seperator" } ] },
						{
							"match": ".[^[0-7] }\\\\\"]*",
							"name": "invalid.illegal.tm markup.underline regex"
						}
					]
				},
				{
					"begin": "\\\\{2}x{(?=\\h)",
					"end": "}|(?=\")",
					"captures": { "0": { "name": "punctuation.definition.list.begin.markdown.tm" } },
					"patterns": [
						{
							"match": "(0{,7}+)(1[0-3]\\h{4}|\\h{1,5})(?<!\\h{9})(\\h*)",
							"captures": {
								"1": { "name": "punctuation.definition.tag.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "invalid.illegal.tm markup.underline" }
							}
						},
						{ "patterns": [ { "include": "#code-point-sequence-seperator" } ] },
						{
							"match": ".[^\\h }\\\\\"]*",
							"name": "invalid.illegal.tm markup.underline regex"
						}
					]
				},
				{
					"match": "(\\\\{2})([0-7]{1,3})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"2": { "name": "constant.numeric.tm" }
					}
				},
				{
					"match": "(\\\\{2}x)(?!{|\")(\\h{,2})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"2": { "name": "constant.numeric.tm" }
					}
				},
				{
					"match": "(?>(\\\\{2}u)|(\\\\u))([^\"].{,3})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"2": { "name": "constant.character.escape.tm" },
						"3": {
							"patterns": [
								{
									"match": "\\h+",
									"name": "constant.numeric.tm"
								},
								{
									"match": "\\H+",
									"name": "invalid.illegal.tm markup.underline regex"
								}
							]
						}
					}
				},
				{
					"match": "\\\\{2}(?>c|[CM](?>-|(.))?)(?>(\\\\{3})(\\\\)|\\g<0>|(\\\\{2})?(\\\\u.{,4}|\\\\?.))?",
					"captures": {
						"0": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"1": { "name": "invalid.illegal.tm markup.underline regex" },
						"2": { "name": "constant.character.escape.tm" },
						"3": { "name": "markup.bold" },
						"4": { "name": "punctuation.definition.tag.tm" },
						"5": {
							"name": "markup.bold regex",
							"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
						}
					}
				},
				{
					"match": "(\\\\{2}[pP]{)(\\^)?(.[^}]*)(})?",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tm" },
						"2": { "name": "support.function.tm" },
						"3": {
							"patterns": [
								{
									"comment": "https://github.com/kkos/oniguruma/blob/bb31b4d402ee3f3a3bc4855c9d0271f43a3e4793/doc/UNICODE_PROPERTIES",
									"match": "(?i:(.*?)((?>In)?\\g<4>(?>Ahom|Anatolian\\g<4>Hieroglyphs|Armenian|Avestan|Balinese|Bengali|Bhaiksuki|Brahmi|Buginese|Carian|Caucasian\\g<4>Albanian|Chakma|Cham|Chorasmian|Deseret|Duployan|Elbasan|Elymaic|Gothic|Grantha|Gujarati|Gurmukhi|Hanunoo|Hatran|Hebrew|Hiragana|Javanese|Lepcha|Kaithi|Kannada|Kharoshthi|Khojki|Khudawadi|Mahajani|Makasar|Malayalam|Mandaic|Manichaean|Marchen|Medefaidrin|Miao|Nabataean|Nandinagari|Newa|Nushu|Osmanya|Palmyrene|Phoenician|Rejang|Runic|Samaritan|Saurashtra|Sharada|Shavian|Siddham|Sogdian|Soyombo|Tagalog|Tagbanwa|Telugu|Thaana|Tibetan|Tifinagh|Tirhuta|Ugaritic|Wancho|Warang\\g<4>Citi|Yezidi|Zanabazar\\g<4>Square)|A\\g<4>(?>dla?m|ghb|Hex|lnum|lpha(?>betic)?|ny|r(?>abic|ab|m[in])|S\\g<4>C\\g<4>I\\g<4>I\\g<4>(?>Hex\\g<4>Digit)?|ssigned|vst)|B\\g<4>(?>a(?>li|mum?|ssa\\g<4>Vah|ss|ta?k)|eng|hks|idi\\g<4>C(?>ontrol)?|lank|opomofo|opo|raille|ra[hi]|ugi|uhi?d)|C\\g<4>(?>a(?>km|nadian\\g<4>Aboriginal|ns|ri|se\\g<4>Ignorable|sed\\g<4>Letter|sed)|h\\g<4>(?>anges\\g<4>When\\g<4>(?>Case(?>fold|mapp)|(?>Lower|Title|Upper)cas)ed|erokee|er|rs)|lose\\g<4>Punctuation|ntrl|o(?>mbining\\g<4>Mark|mmon|nnector\\g<4>Punctuation|ntrol|ptic|pt)?|prt|uneiform|urrency\\g<4>Symbol|W\\g<4>C[FM]|W[LTU]|ypriot|yrillic|yrl|[cfIns])?|D\\g<4>(?>ash\\g<4>Punctuation|ash|e(?>cimal\\g<4>Number|fault\\g<4>Ignorable\\g<4>Code\\g<4>Point|precated|p|vanagari|va)|i(?>acritic|ak?|git|ves\\g<4>Akuru)?|ogra?|srt|upl)|E\\g<4>(?>Base|Comp|gyptian\\g<4>Hieroglyphs|gyp|lba|lym|Mod|moji\\g<4>(?>Component|Modifier\\g<4>(?>Base)?|Presentation)?|nclosing\\g<4>Mark|Pres|thiopic|thi|xtende(?>d\\g<4>Pictographic|r)|xt\\g<4>Pict|xt)|F\\g<4>(?>inal\\g<4>Punctuation|ormat)|G\\g<4>(?>eorgian|eor|lagolitic|lag|on[gm]|oth|r\\g<4>(?>an|apheme\\g<4>(?>Base|Extend|Link)|aph|Base|Ext|ee?k|Link)|u(?>jr|njala\\g<4>Gondi|ru))|H\\g<4>(?>an\\g<4>(?>gul|ifi\\g<4>Rohingya|[gio])?|atr|ebr|ex\\g<4>Digit|ex|ira|luw|mn[gp]|ung|yphen)|I\\g<4>(?>D\\g<4>(?>Continue|C|eographic|eo|Start|S\\g<4>(?>B|Tr)inary\\g<4>Operator|S[BT]?)|mperial\\g<4>Aramaic|tal)|J\\g<4>(?>ava|oin\\g<4>C(?>ontrol)?)|K\\g<4>(?>a(?>li|na|takana|yah\\g<4>Li)|h(?>ar|itan\\g<4>Small\\g<4>Script|me?r|oj)|its|nda|thi)|L\\g<4>(?>a(?>na|oo?|ti?n)|epc|etter\\g<4>(?>Number)?|i(?>mbu?|n[ab]|ne\\g<4>Separator|near\\g<4>[AB]|su)|O(?>E|gical\\g<4>Order\\g<4>Exception|wer(?>case\\g<4>(?>Letter)?)?)?|y[cd]i(?>an)?|[Clmtu])?|M\\g<4>(?>a(?>hj|ka|n[di]|r[ck]|saram\\g<4>Gondi|th\\g<4>Symbol|th)|c|e\\g<4>(?>df|etei\\g<4>Mayek|nde\\g<4>Kikakui|nd|roitic\\g<4>(?>Cursive|Hieroglyphs)|r[co])?|lym|n|odifier\\g<4>(?>Letter|Symbol)|odi|ongolian|ong|roo?|tei|ultani|ult|yanmar|ymr)?|N\\g<4>(?>and|arb|bat|Char|ew\\g<4>Tai\\g<4>Lue|koo?|oncharacter\\g<4>Code\\g<4>Point|onspacing\\g<4>Mark|shu|umber|yiakeng\\g<4>Puachue\\g<4>Hmong|[dlo])?|O\\g<4>(?>Alpha|D\\g<4>I|gh?am|Gr\\g<4>Ext|I\\g<4>D[CS]|l\\g<4>(?>Chiki|ck|d\\g<4>(?>Hungarian|Italic|Permic|Persian|Sogdian|(?>North|South)\\g<4>Arabian|Turkic)|ower)|Math|pen\\g<4>Punctuation|rkh|ri?ya|sa?ge|sma|ther\\g<4>(?>Alphabetic|Default\\g<4>Ignorable\\g<4>Code\\g<4>Point|Grapheme\\g<4>Extend|I\\g<4>D\\g<4>(?>Continue|Start)|Letter|Lowercase|Math|Number|Punctuation|Symbol|Uppercase)?|Upper)|P\\g<4>(?>a\\g<4>(?>hawh\\g<4>Hmong|lm|ragraph\\g<4>Separator|t\\g<4>(?>Syn|W\\g<4>S|tern\\g<4>(?>Syntax|White\\g<4>Space))|u\\g<4>Cin\\g<4>Hau|uc)|C\\g<4>M|erm|h(?>ags\\g<4>Pa|ag|l[ip]|nx)?|lrd|repended\\g<4>Concatenation\\g<4>Mark|rivate\\g<4>Use|rint|rti|salter\\g<4>Pahlavi|unct(?>uation)?|[cdefios])?|Q\\g<4>(?>aa[ci]|Mark|uotation\\g<4>Mark)|R\\g<4>(?>adical|egional\\g<4>Indicator|I|jng|ohg|unr)|S\\g<4>(?>a(?>mr|rb|ur)|entence\\g<4>Terminal|eparator|gnw|haw|hrd|i(?>dd|gn\\g<4>Writing|nhala|n[dh])|o(?>ft\\g<4>Dotted|g[do]|ra\\g<4>Sompeng|ra|yo)?|pac(?>e\\g<4>Separator|e|ing\\g<4>Mark)|Term|undanese|und|urrogate|y(?>loti\\g<4>Nagri|lo|mbol|rc|riac)|[cDkm])?|T\\g<4>(?>a(?>gb|i\\g<4>(?>Le|Tham|Viet)|kri?|l[eu]|mi?l|ngut|ng|vt)|elu|erminal\\g<4>Punctuation|erm|fng|glg|ha[ai]|i(?>bt|rh|tlecase\\g<4>Letter))|U\\g<4>(?>gar|Ideo|nassigned|nified\\g<4>Ideograph|nknown|pper(?>case\\g<4>(?>Letter)?)?)|V\\g<4>(?>aii?|ariation\\g<4>Selector|S)|W\\g<4>(?>ara|cho|(?>hite\\g<4>)?Space|ord)|X\\g<4>(?>I\\g<4>D\\g<4>(?>Continue|Start|[CS])|digit|peo|sux)|Y\\g<4>(?>ezi|iii|i)|Z\\g<4>(?>anb|inh|yyy|zzz|[lps])?|In\\g<4>(?>A\\g<4>(?>dlam|egean\\g<4>Numbers|lchemical\\g<4>Symbols|lphabetic\\g<4>Presentation\\g<4>Forms|ncient\\g<4>(?>Greek\\g<4>(?>Musical\\g<4>Notation|Numbers)|Symbols)|rabic\\g<4>(?>Extended\\g<4>A|Mathematical\\g<4>Alphabetic\\g<4>Symbols|Presentation\\g<4>Forms\\g<4>[AB]|Supplement)?|rrows)|B\\g<4>(?>amum\\g<4>(?>Supplement)?|asic\\g<4>(?>Latin|Vah)|assa\\g<4>Vah|atak|lock\\g<4>Elements|opomofo\\g<4>(?>Extended)?|ox\\g<4>Drawing|raille\\g<4>Patterns|uhid|yzantine\\g<4>Musical\\g<4>Symbols)|C\\g<4>(?>herokee\\g<4>(?>Supplement)?|hess\\g<4>Symbols|J\\g<4>K\\g<4>(?>Compatibility\\g<4>(?>Forms|Ideographs\\g<4>(?>Supplement)?)?|Radicals\\g<4>Supplement|Strokes|Symbols\\g<4>and\\g<4>Punctuation|Unified\\g<4>Ideographs\\g<4>(?>Extension\\g<4>[ABCDEFG])?)|ombining\\g<4>(?>Diacritical\\g<4>Marks\\g<4>(?>Extended|for\\g<4>Symbols|Supplement)?|Half\\g<4>Marks)|ommon\\g<4>Indic\\g<4>Number\\g<4>Forms|ontrol\\g<4>Pictures|optic\\g<4>(?>Epact\\g<4>Numbers)?|ounting\\g<4>Rod\\g<4>Numerals|uneiform\\g<4>(?>Numbers\\g<4>and\\g<4>Punctuation)?|urrency\\g<4>Symbols|ypriot\\g<4>Syllabary|yrillic\\g<4>(?>Extended\\g<4>[ABC]|Supplement)?)|D\\g<4>(?>evanagari\\g<4>(?>Extended)?|ingbats|ives\\g<4>Akuru|ogra|omino\\g<4>Tiles)|E\\g<4>(?>arly\\g<4>Dynastic\\g<4>Cuneiform|gyptian\\g<4>Hieroglyph\\g<4>(?>Format\\g<4>Control)?s|moticons|nclosed\\g<4>(?>Alphanumeric\\g<4>s(?>upplement)?|C\\g<4>J\\g<4>K\\g<4>Letters\\g<4>and\\g<4>Months|Ideographic\\g<4>Supplement)|thiopic\\g<4>(?>Extended\\g<4>A?|Supplement)?)?|G\\g<4>(?>eneral\\g<4>Punctuation|eometric\\g<4>Shapes\\g<4>(?>Extended)?|eorgian\\g<4>(?>Extended|Supplement)?|lagolitic\\g<4>(?>Supplement)?|reek\\g<4>(?>and\\g<4>Coptic|Extended)|unjala\\g<4>Gondi)|H\\g<4>(?>alfwidth\\g<4>and\\g<4>Fullwidth\\g<4>Forms|angul\\g<4>(?>Compatibility\\g<4>Jamo|Jamo\\g<4>(?>Extended\\g<4>[AB])?|Syllables)|anifi\\g<4>Rohingya|erited|igh\\g<4>(?>Private\\g<4>Use\\g<4>)?Surrogates)?|I\\g<4>(?>deographic\\g<4>(?>Description\\g<4>Characters|Symbols\\g<4>and\\g<4>Punctuation)|mperial\\g<4>Aramaic|ndic\\g<4>Siyaq\\g<4>Numbers|nscriptional\\g<4>Pa(?>hlavi|rthian)|P\\g<4>A\\g<4>Extensions|tial\\g<4>Punctuation)|K\\g<4>(?>ana\\g<4>(?>Extended\\g<4>A|Supplement)|anbun|angxi\\g<4>Radicals|atakana\\g<4>(?>Phonetic\\g<4>Extensions)?|ayah\\g<4>Li|hitan\\g<4>Small\\g<4>Script|hmer\\g<4>(?>Symbols)?)|L\\g<4>(?>ao|atin\\g<4>(?>1\\g<4>Supplement|Extended\\g<4>(?>Additional|[ABCDE]))|etterlike\\g<4>Symbols|imbu|inear\\g<4>(?>A|B\\g<4>(?>Ideograms|Syllabary))|isu\\g<4>(?>Supplement)?|ow\\g<4>Surrogates|y[cd]ian)|M\\g<4>(?>ahjong\\g<4>Tiles|asaram\\g<4>Gondi|athematical\\g<4>(?>Alphanumeric\\g<4>Symbols|Operators)|ayan\\g<4>Numerals|eetei\\g<4>Mayek\\g<4>(?>Extensions)?|ende\\g<4>Kikakui|eroitic\\g<4>(?>Cursive|Hieroglyphs)|iscellaneous\\g<4>(?>Mathematical\\g<4>Symbols\\g<4>[AB]|Symbols\\g<4>(?>and\\g<4>(?>Arrows|Pictographs))?|Technical)|odifier\\g<4>Tone\\g<4>Letters|odi|ongolian\\g<4>(?>Supplement)?|ro|usical\\g<4>Symbols|ultani\\g<4>(?>Symbols)?|yanmar\\g<4>(?>Extended\\g<4>[AB])?)|N\\g<4>(?>ew\\g<4>Tai\\g<4>Lue|Ko|o\\g<4>Block|umber\\g<4>Forms|yiakeng\\g<4>Puachue\\g<4>Hmong)|O\\g<4>(?>gham|ld\\g<4>(?>Hungarian|Italic|North\\g<4>Arabian|Permic|Persian|Sogdian|South\\g<4>Arabian|Turkic)|l\\g<4>Chiki|ptical\\g<4>Character\\g<4>Recognition|riya|rnamental\\g<4>Dingbats|sage|ttoman\\g<4>Siyaq\\g<4>Numbers)|P\\g<4>(?>ahawh\\g<4>Hmong|au\\g<4>Cin\\g<4>Hau|hags\\g<4>pa|haistos\\g<4>Disc|honetic\\g<4>Extensions\\g<4>(?>Supplement)?|laying\\g<4>Cards|rivate\\g<4>Use\\g<4>Area|salter\\g<4>Pahlavi)|Rumi\\g<4>Numeral\\g<4>Symbols|S\\g<4>(?>criptional\\g<4>Pa(?>hlavi|rthian)|horthand\\g<4>Format\\g<4>Controls|inhala\\g<4>(?>Archaic\\g<4>Numbers)?|mall\\g<4>(?>Form\\g<4>Variants|Kana\\g<4>Extension)?|ora\\g<4>Sompeng|pacing\\g<4>Modifier\\g<4>Letters|pecials|undanese\\g<4>(?>Supplement)?|uperscripts\\g<4>and\\g<4>Subscripts|upplementa\\g<4>(?>l\\g<4>(?>Arrows\\g<4>[ABC]|Mathematical\\g<4>Operators|Punctuation|Symbols\\g<4>and\\g<4>Pictographs)|ry\\g<4>Private\\g<4>Use\\g<4>Area\\g<4>[AB])|utton\\g<4>Sign\\g<4>Writing|yloti\\g<4>Nagri|ymbols\\g<4>(?>and\\g<4>Pictographs\\g<4>Extended\\g<4>A|for\\g<4>Legacy\\g<4>Computing)|yriac\\g<4>(?>Supplement)?)|T\\g<4>(?>ags|ai\\g<4>(?>Le|Tham|Viet|Xuan\\g<4>Jing\\g<4>Symbols)?|akri|amil\\g<4>(?>Supplement)?|angut\\g<4>(?>Components|Supplement)?|hai|ransport\\g<4>and\\g<4>Map\\g<4>Symbols)|U\\g<4>(?>nified\\g<4>Canadian\\g<4>Aboriginal\\g<4>Syllabics\\g<4>(?>Extended)?)|V\\g<4>(?>ai|ariation\\g<4>Selectors\\g<4>(?>Supplement)?|edic\\g<4>Extensions|ertical\\g<4>Forms)|Y\\g<4>(?>ijing\\g<4>Hexagram\\g<4>Symbols|i\\g<4>(?>Radical|Syllable)s))))?(.*)|([ _-]*){0}",
									"captures": {
										"1": { "name": "invalid.illegal.tm markup.underline regex" },
										"2": { "name": "variable.other.enummember.tm" },
										"3": { "name": "invalid.illegal.tm markup.underline regex" },
										"4": { "name": "punctuation.definition.tag.tm" }
									}
								}
							]
						},
						"4": { "name": "punctuation.definition.list.begin.markdown.tm" }
					}
				}
			]
		},
		"code-point-sequence-seperator": {
			"comment": "Tabs \t are not allowed. What is the unicode for \n?",
			"patterns": [
				{ "match": " +" },
				{
					"match": "\\\\n",
					"name": "constant.character.escape.tm"
				},
				{
					"match": "(\\\\u)(0020)",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": { "name": "constant.numeric.tm" }
					}
				}
			]
		},
		"subroutine": {
			"comment": "\\g<0> \\g'+999' \\g<-0065535> \\g'name_123'  \\g<_\\#°$\u00b0% ^&(\"'[0-9]>",
			"begin": "(\\\\{2}g)((?<bracket><)|')(?=((?(<bracket>)>|'))?)((?~\\w|[-+]0*[1-9]|\"|(?(<bracket>)>|')))(?>([-+]?(0*)[1-9]\\d{,2}(\\d{,2}(\\d*))|(0*)0)((?~\"|(?(<bracket>)>|'))))?",
			"end": "(\\\\(?>u\\d{,3})?)?((?((?!\\3))>|'))|(?=(\"))",
			"name": "subroutine",
			"beginCaptures": {
				"1": { "name": "string.regexp.tm" },
				"2": { "name": "constant.character.set.regexp.tm" },
				"4": { "name": "invalid.illegal.tm markup.strikethrough" },
				"5": { "name": "invalid.illegal.tm markup.underline regex" },
				"6": { "name": "constant.numeric.tm" },
				"7": { "name": "punctuation.definition.tag.tm" },
				"8": { "name": "invalid.illegal.tm markup.italic" },
				"9": { "name": "markup.underline" },
				"10": { "name": "punctuation.definition.tag.tm" },
				"11": { "name": "invalid.illegal.tm markup.underline regex" }
			},
			"endCaptures": {
				"1": { "name": "invalid.illegal.tm markup.underline" },
				"2": { "name": "constant.character.set.regexp.tm" },
				"3": { "name": "invalid.illegal.tm markup.strikethrough" }
			},
			"contentName": "markup.bold regex",
			"patterns": [ { "include": "source.json.textmate#escape-characters" } ]
		},
		"backreference": {
			"patterns": [
				{
					"comment": "\\1",
					"match": "(\\\\{2})([1-9]\\d{,2})(\\d*)",
					"captures": {
						"1": { "name": "string.regexp.tm" },
						"2": { "name": "constant.numeric.tm" },
						"3": { "name": "invalid.illegal.tm" }
					}
				},
				{
					"comment": "\\k<1> \\k'-2' \\k'+003' \\k<name> \\k'name_123+5' \\k<9-2>",
					"match": "(\\\\{2}k)(?>((?<quote>')|<)(?>((?~|(?>(?(<quote>)'|>)|\\)|(?<!\\\\)\\\\{2}*\")|.*?))(?>(?>(?>((0*)[1-9]\\d{,2}(\\d{,2}))|([a-zA-Z_]\\w*))([-+](0*)[12]?\\d{1,9})?)|([-+](0*)[1-9]\\d*)))?((?~(?('quote')'|>)|\\)|(?<!\\\\)\\\\{2}*\"))((?('quote')'|>))?)",
					"captures": {
						"1": { "name": "string.regexp.tm" },
						"2": { "name": "constant.character.set.regexp.tm" },
						"4": { "name": "invalid.illegal.tm markup.underline regex" },
						"5": { "name": "constant.numeric.tm" },
						"6": { "name": "punctuation.definition.tag.tm" },
						"7": { "name": "invalid.illegal.tm markup.italic" },
						"8": { "name": "markup.bold" },
						"9": { "name": "constant.numeric.tm" },
						"10": { "name": "punctuation.definition.tag.tm" },
						"11": { "name": "constant.numeric.tm" },
						"12": { "name": "punctuation.definition.tag.tm" },
						"13": { "name": "invalid.illegal.tm markup.underline regex" },
						"14": { "name": "constant.character.set.regexp.tm" }
					}
				}
			]
		},
		"quantifier": {
			"comment": "+ * ? {1,9}",
			"patterns": [
				{
					"comment": "For some reason (\\G|...) and any of its variations are extremely performance heavy",
					"match": "\\G(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})",
					"name": "invalid.illegal.tm markup.underline"
				},
				{
					"match": "^(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})",
					"name": "invalid.illegal.tm markup.underline"
				},
				{
					"comment": "As soon as theres a {0} quantifier, all other quantifiers are nullified",
					"//": "Causes too much lag. -4x in some cases",
					"//match": "(\\g<4>)?({0*,?0+})((?(<1>)\\g<4>?|((?>[+*?]++|{(?>\\g<5>,\\g<5>|\\g<5>,?|,(0*(?>100000|\\d{1,5})))})+)))",
					"//captures": {
						"1": { "name": "punctuation.definition.tag.tm" },
						"2": { "patterns": [ { "include": "#quantifier" } ] },
						"3": { "name": "punctuation.definition.tag.tm" }
					}
				},
				{
					"comment": "+ * ? ++ +? *+ *? ?+ ?? \n  ? creates a lazy quantifier and + a possessive quantifier",
					"match": "[+*?]([+?])?",
					"captures": {
						"0": { "name": "keyword.tm" },
						"1": { "name": "strong" }
					}
				},
				{
					"match": "({)(?<number>(0*)(?>100000|\\d{1,5})(\\d*))?(,)?((?(<number>)(?>(0*)(?>100000|\\d{1,5})(\\d*))?|(0*)(?>100000|\\d{1,5})(\\d*)))(})(?(<4>)(\\?))?",
					"captures": {
						"1": { "name": "keyword.tm" },
						"2": { "name": "constant.numeric.tm" },
						"3": { "name": "punctuation.definition.tag.tm" },
						"4": { "name": "invalid.illegal.tm markup.underline" },
						"5": { "name": "support.function.tm" },
						"6": { "name": "constant.numeric.tm" },
						"7": { "name": "punctuation.definition.tag.tm" },
						"8": { "name": "invalid.illegal.tm markup.underline" },
						"9": { "name": "punctuation.definition.tag.tm" },
						"10": { "name": "invalid.illegal.tm markup.underline" },
						"11": { "name": "keyword.tm" },
						"12": { "name": "keyword.tm strong" }
					}
				}
			]
		},
		"anchor": {
			"comment": "$ ^ \\A \\B \\b \\G \\K \\Y \\y \\Z \\z",
			"match": "(?>[$^]|\\\\{2}[ABbGKYyZz])([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"captures": {
				"0": { "name": "variable.tm" },
				"1": { "name": "invalid.illegal.tm markup.underline regex" }
			}
		},
		"alternation": {
			"comment": "|",
			"match": "\\|([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"captures": {
				"0": { "name": "keyword.control.tm" },
				"1": { "name": "invalid.illegal.tm markup.underline regex" }
			}
		},
		"character-types": {
			"comment": "\\D \\d \\H \\h \\S \\s \\W \\w",
			"match": "(?i)\\\\{2}[DHSW]",
			"name": "variable.other.enummember.tm"
		},
		"character-types-2": {
			"comment": "\\. \\N \\O \\R \\X cannot be used in character classes",
			"match": "\\.|\\\\{2}[NORX]",
			"name": "variable.other.enummember.tm"
		},
		"characters": {
			"comment": "\\a \\e \\f \\n \\r \\t \\v",
			"match": "\\\\{2}[aefnrtv]",
			"name": "punctuation.definition.list.begin.markdown"
		},
		"character-literal": {
			"comment": "Match anything left over and all non-meta charaters",
			"match": ".[^\\x-\\x1F\\x7F \"#$^.+*?|\\[{()\\\\]*",
			"name": "entity.name.label.tm strong regex"
		},
		"invalid": {
			"comment": "invalid: single escaped characters (including at newlines), rouge right brackets, unescaped double quotes and any invalid control characters",
			"match": "\\\\.?|[)\"\\x-\\x1F\\x7F]",
			"name": "invalid.illegal.tm markup.underline regex"
		},
		"test": {
			"comment": "Disable \"character-literal\" when running tests. As it will try to capture everything and leave nothing for \"test\". This can be done by simply renaming it.",
			"match": "(*FAIL).",
			"name": "keyword.control strong regex"
		},
		"_disabled_": {
			"comment": "Basic visual test",
			"//": "https://github.com/kkos/oniguruma/blob/master/doc/RE",
			"patterns": [
				{ "match": "(*FAIL)  !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ " },
				{ "match": "(*FAIL) \"\/\b\f\n\r\t\u0000 " },
				{ "while": "(*FAIL) \\ \\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\.\\/\\0\\1\\2\\3\\4\\5\\6\\7\\8\\9\\:\\;\\<\\=\\>\\\\\\?\\@\\A\\B\\C-]\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M-a\\N\\O\\P{^L}\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z\\[\\\\\\]\\^\\_\\`\\a\\b\\c]\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p{l}\\q\\r\\s\\t\\u0000\\v\\w\\x\\y\\z\\{\\|\\}\\~ " },
				{ "match": "(*FAIL) \\\"\\\/\\\b\\\f\\\n\\\r\\\t\\\u0000 " },
				{ "match": "(*FAIL) \\\\ " },
				{ "match": "(*FAIL) (?x).{2,3}{2,3}(.{2,3}(?:.{2,3})){2,3}{,3}{2,}{2} {000} *{0} {0}* *{0}* {0}{0}{0} {0}{2,3} {2,3}{0}{2,3} {2,3\\} " },
				{ "match": "(*FAIL) () (?<= (= (?> (=)? ) )? ) (?= (?= ) ) " },
				{ "match": "(*FAIL) \\x \\x00 \\xFF \\x{} \\x{k} \\x\\{123} \\x{00000000 0013FFFF} [\\x{42 001FFFFF 48}-\\x{FFFFFFFF \n 45}] " },
				{ "match": "(*FAIL) \\o{} \\o{k} \\o\\{123} \\o{00000000000 00004777777} [\\o{102 00004777777 110}-\\o{37777777777 \u0020 105}] " },
				{ "match": "(*FAIL) [a-z&&]u°𐐷Ꚛ�𐀀𐃘[�𐃘]®×ñÿ¡¼÷€Çô│╨ε■ ‚ Ȁ°Ççë£ ÿ[[:^upper:]] " },
				{ "match": "(*FAIL) \\g<0>? \\x555 \\x{201E} \\p{L} \\p{L etter------} " },
				{ "match": "(*FAIL) (?~a) (?{foo}) " },
				{ "match": "(*FAIL) QabcE $ \\$   an{name}bc  At aT aa abc abd cd a1 b a1b n1000 Q.E q.e test a<name0>b$abc " },
				{ "match": "(*FAIL) (?x)#comment\n \\# abc (?-x)#notcomment\n \\# abc " },
				{ "match": "(*FAIL) (?<_azAZ0-9 #$('°>) (?<_azAZ0>) (?(<_azAZ0-9>)true|false) \\g<_azAZ0-9 #$('°> \\k<_azAZ0-9> " },
				{ "match": "(*FAIL) (){0}[[:word:]]\\g<1>\\k'1' (( (){0}[[:word:]]\\g<1>\\k'1' )) " }
			]
		}
	}
}