"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVSCodeTokens = exports.renderSnap = exports.parseSnap = void 0;
const tm = __importStar(require("vscode-textmate"));
const parsing_1 = require("./parsing");
Object.defineProperty(exports, "parseSnap", { enumerable: true, get: function () { return parsing_1.parseSnap; } });
Object.defineProperty(exports, "renderSnap", { enumerable: true, get: function () { return parsing_1.renderSnap; } });
async function getVSCodeTokens(registry, scope, source) {
    return registry.loadGrammar(scope).then((grammar) => {
        if (!grammar) {
            throw new Error(`Could not load scope ${scope}`);
        }
        let ruleStack = tm.INITIAL;
        return source.split(/\r\n|\n/).map((line, n) => {
            var { tokens, ruleStack: ruleStack1 } = grammar.tokenizeLine(line, ruleStack);
            ruleStack = ruleStack1;
            return {
                src: line,
                tokens: tokens
            };
        });
    });
}
exports.getVSCodeTokens = getVSCodeTokens;
//# sourceMappingURL=index.js.map